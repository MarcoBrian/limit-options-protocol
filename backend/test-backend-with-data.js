const axios = require('axios');
const fs = require('fs');
const path = require('path');

const BACKEND_URL = 'http://localhost:3000';

async function testBackendWithData() {
  console.log("üéØ BACKEND TEST WITH GENERATED DATA");
  console.log("===================================");
  console.log("Testing backend using data from smart contracts test");
  console.log("");

  // Load test data generated by smart contracts test
  const testDataPath = path.join(__dirname, '..', 'test-data.json');
  if (!fs.existsSync(testDataPath)) {
    console.log("‚ùå Test data file not found!");
    console.log("   Please run the smart contracts test first:");
    console.log("   npm run test:contracts");
    return false;
  }

  const testData = JSON.parse(fs.readFileSync(testDataPath, 'utf8'));
  console.log("üìÑ Loaded test data:");
  console.log(`   LOP Contract: ${testData.contracts.lop}`);
  console.log(`   OptionsNFT Contract: ${testData.contracts.optionsNFT}`);
  console.log(`   Maker: ${testData.accounts.maker}`);
  console.log("");

  // Test 1: Backend health check
  console.log("1. Testing backend health...");
  try {
    const response = await axios.get(`${BACKEND_URL}/health`, { timeout: 5000 });
    console.log("‚úÖ Backend health check passed");
    console.log(`   Service: ${response.data.service}`);
  } catch (error) {
    console.log("‚ùå Backend health check failed");
    console.log(`   Error: ${error.code || error.message}`);
    return false;
  }

  console.log("");

  // Test 2: Submit order to backend using real data
  console.log("2. Testing order submission with real data...");
  try {
    const backendPayload = {
      order: {
        salt: testData.orderData.order.salt,
        maker: testData.orderData.originalAddresses.maker,
        receiver: testData.orderData.originalAddresses.receiver,
        makerAsset: testData.orderData.originalAddresses.makerAsset,
        takerAsset: testData.orderData.originalAddresses.takerAsset,
        makingAmount: testData.orderData.order.makingAmount,
        takingAmount: testData.orderData.order.takingAmount,
        makerTraits: testData.orderData.order.makerTraits
      },
      signature: {
        r: testData.orderData.lopSignature.r,
        s: testData.orderData.lopSignature.s,
        v: testData.orderData.lopSignature.v
      },
      lopAddress: testData.orderData.lopAddress,
      optionParams: testData.orderData.optionParams,
      optionsNFTSignature: {
        r: testData.orderData.optionsNFTSignature.r,
        s: testData.orderData.optionsNFTSignature.s,
        v: testData.orderData.optionsNFTSignature.v
      },
      optionsNFTAddress: testData.orderData.optionsNFTAddress
    };

    const response = await axios.post(`${BACKEND_URL}/api/orders`, backendPayload, { timeout: 10000 });
    console.log("‚úÖ Order submitted successfully!");
    console.log(`   Order Hash: ${response.data.data.orderHash}`);
    console.log(`   Order ID: ${response.data.data.id}`);
    
    const orderHash = response.data.data.orderHash;
    console.log("");

    // Test 3: Fetch orders from backend
    console.log("3. Testing order retrieval...");
    const ordersResponse = await axios.get(`${BACKEND_URL}/api/orders?status=open&limit=10`);
    console.log(`‚úÖ Found ${ordersResponse.data.data.count} open orders`);
    
    // Fix: Use correct field name (order_hash instead of orderHash)
    const submittedOrder = ordersResponse.data.data.orders.find(o => o.order_hash === orderHash);
    if (submittedOrder) {
      console.log("‚úÖ Our submitted order was found in the list");
    } else {
      console.log("‚ùå Our submitted order was not found in the list");
      console.log(`   Looking for: ${orderHash}`);
      console.log(`   Available hashes: ${ordersResponse.data.data.orders.map(o => o.order_hash).join(', ')}`);
    }

    console.log("");

    // Test 4: Get specific order
    console.log("4. Testing specific order retrieval...");
    const specificOrderResponse = await axios.get(`${BACKEND_URL}/api/orders/${orderHash}`);
    console.log("‚úÖ Retrieved specific order successfully");
    console.log(`   Maker: ${specificOrderResponse.data.data.maker}`);
    console.log(`   Status: ${specificOrderResponse.data.data.status}`);

    console.log("");

    // Test 5: Generate fill calldata
    console.log("5. Testing fill calldata generation...");
    const fillResponse = await axios.post(`${BACKEND_URL}/api/orders/${orderHash}/fill`, {
      taker: testData.accounts.taker,
      fillAmount: testData.testParams.premium,
      lopAddress: testData.contracts.lop
    });
    console.log("‚úÖ Fill calldata generated successfully!");
    console.log(`   Estimated Gas: ${fillResponse.data.data.estimatedGas}`);
    console.log(`   Message: ${fillResponse.data.data.message}`);
    console.log(`   Order data available: ${fillResponse.data.data.orderData ? 'Yes' : 'No'}`);
    console.log(`   Signature available: ${fillResponse.data.data.signature ? 'Yes' : 'No'}`);

    console.log("");

    // Test 6: Filter orders by maker
    console.log("6. Testing order filtering...");
    const filteredResponse = await axios.get(`${BACKEND_URL}/api/orders?maker=${testData.accounts.maker}&status=open`);
    console.log(`‚úÖ Filtered orders by maker: ${filteredResponse.data.data.count} found`);

    return true;

  } catch (error) {
    console.log("‚ùå Backend test failed:");
    if (error.response) {
      console.log(`   Status: ${error.response.status}`);
      console.log(`   Error: ${JSON.stringify(error.response.data, null, 2)}`);
    } else {
      console.log(`   Error: ${error.message}`);
    }
    return false;
  }
}

async function main() {
  const success = await testBackendWithData();
  
  console.log("");
  if (success) {
    console.log("üéâ BACKEND TEST COMPLETED SUCCESSFULLY!");
    console.log("‚úÖ Backend health check working");
    console.log("‚úÖ Order submission working");
    console.log("‚úÖ Order retrieval working");
    console.log("‚úÖ Order filtering working");
    console.log("‚úÖ Fill calldata generation working");
    console.log("");
    console.log("üöÄ YOUR BACKEND IS FULLY FUNCTIONAL!");
    console.log("");
    console.log("üí° Combined with the smart contracts test, your complete system is working!");
  } else {
    console.log("‚ùå BACKEND TEST FAILED");
    console.log("");
    console.log("üí° Make sure:");
    console.log("   1. Backend is running: npm run dev");
    console.log("   2. Smart contracts test was run first: npm run test:contracts");
  }
}

main().catch(console.error); 