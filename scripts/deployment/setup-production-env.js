const fs = require('fs');
const path = require('path');

// Setup production environment for both backend and frontend
async function setupProductionEnvironment() {
  console.log('üîß Setting up production environment configuration...\n');

  // Read the root .env file
  const rootEnvPath = path.join(__dirname, '..', '..', '.env');
  const frontendEnvPath = path.join(__dirname, '..', '..', 'frontend', '.env');

  try {
    // Check if root .env exists
    if (!fs.existsSync(rootEnvPath)) {
      console.error('‚ùå Root .env file not found!');
      console.log('üìã Please copy config.env.template to .env and configure it first:');
      console.log('   cp config.env.template .env');
      console.log('   # Edit .env with your production values');
      process.exit(1);
    }

    // Read the root .env file
    const rootEnvContent = fs.readFileSync(rootEnvPath, 'utf8');
    
    // Parse the .env file
    const envVars = {};
    rootEnvContent.split('\n').forEach(line => {
      const trimmedLine = line.trim();
      if (trimmedLine && !trimmedLine.startsWith('#') && trimmedLine.includes('=')) {
        const [key, ...valueParts] = trimmedLine.split('=');
        if (key && valueParts.length > 0) {
          envVars[key] = valueParts.join('=');
        }
      }
    });

    // Validate required environment variables
    const requiredVars = [
      'NODE_ENV',
      'NETWORK',
      'CHAIN_ID',
      'BASE_SEPOLIA_RPC_URL'
    ];

    const missingVars = requiredVars.filter(varName => !envVars[varName] || envVars[varName] === 'your_value_here');
    
    if (missingVars.length > 0) {
      console.error('‚ùå Missing or incomplete required environment variables:');
      missingVars.forEach(varName => {
        console.error(`   - ${varName}`);
      });
      console.log('\nüìã Please edit your .env file and set these values');
      process.exit(1);
    }

    // Create frontend .env content with REACT_APP_ prefix
    const frontendEnvContent = `# Frontend Environment Variables - Production
# Generated by setup-production-env.js

# Contract addresses (filled by deployment)
REACT_APP_LOP_ADDRESS=${envVars.LOP_ADDRESS || ''}
REACT_APP_OPTIONS_NFT_ADDRESS=${envVars.OPTIONS_NFT_ADDRESS || ''}
REACT_APP_DUMMY_TOKEN_ADDRESS=${envVars.DUMMY_TOKEN_ADDRESS || ''}
REACT_APP_MOCK_USDC_ADDRESS=${envVars.MOCK_USDC_ADDRESS || ''}
REACT_APP_MOCK_ETH_ADDRESS=${envVars.MOCK_ETH_ADDRESS || ''}

# Network Configuration
REACT_APP_CHAIN_ID=${envVars.CHAIN_ID || '84532'}
REACT_APP_RPC_URL=${envVars.BASE_SEPOLIA_RPC_URL || 'https://sepolia.base.org'}
REACT_APP_NETWORK=${envVars.NETWORK || 'base-sepolia'}

# Backend API URL
REACT_APP_API_URL=${envVars.REACT_APP_API_URL || 'http://localhost:3000'}

# Build configuration
GENERATE_SOURCEMAP=false
`;

    // Write to frontend .env file
    fs.writeFileSync(frontendEnvPath, frontendEnvContent);
    
    console.log('‚úÖ Base Sepolia environment setup complete!');
    console.log('üìÅ Frontend .env file created:', frontendEnvPath);
    console.log('\nüìã Configuration Summary:');
    console.log(`   Environment: ${envVars.NODE_ENV}`);
    console.log(`   Network: ${envVars.NETWORK} (Chain ID: ${envVars.CHAIN_ID})`);
    console.log(`   RPC URL: ${envVars.BASE_SEPOLIA_RPC_URL}`);
    console.log(`   API URL: ${envVars.REACT_APP_API_URL || 'http://localhost:3000'}`);
    
    if (!envVars.LOP_ADDRESS) {
      console.log('\n‚ö†Ô∏è  Contract addresses not set yet. Deploy contracts first:');
      console.log('   npm run deploy:base-sepolia');
    }

    console.log('\nüöÄ Next steps:');
    console.log('1. Get Base Sepolia ETH from faucet: https://www.coinbase.com/faucets/base-ethereum-sepolia-faucet');
    console.log('2. Deploy contracts: npm run deploy:base-sepolia');
    console.log('3. Build frontend: npm run build:frontend');
    console.log('4. Start backend: npm start');

  } catch (error) {
    console.error('‚ùå Error setting up production environment:', error.message);
    process.exit(1);
  }
}

setupProductionEnvironment();