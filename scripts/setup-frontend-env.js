const fs = require('fs');
const path = require('path');

// Read the root .env file
const rootEnvPath = path.join(__dirname, '..', '.env');
const frontendEnvPath = path.join(__dirname, '..', 'frontend', '.env');

try {
  // Read the root .env file
  const rootEnvContent = fs.readFileSync(rootEnvPath, 'utf8');
  
  // Parse the .env file
  const envVars = {};
  rootEnvContent.split('\n').forEach(line => {
    const trimmedLine = line.trim();
    if (trimmedLine && !trimmedLine.startsWith('#')) {
      const [key, ...valueParts] = trimmedLine.split('=');
      if (key && valueParts.length > 0) {
        envVars[key] = valueParts.join('=');
      }
    }
  });

  // Create frontend .env content with REACT_APP_ prefix
  const frontendEnvContent = `# Frontend Environment Variables
# Contract addresses from root .env file
# Generated by setup-frontend-env.js

REACT_APP_LOP_ADDRESS=${envVars.LOP_ADDRESS || ''}
REACT_APP_OPTIONS_NFT_ADDRESS=${envVars.OPTIONS_NFT_ADDRESS || ''}
REACT_APP_DUMMY_TOKEN_ADDRESS=${envVars.DUMMY_TOKEN_ADDRESS || ''}
REACT_APP_MOCK_USDC_ADDRESS=${envVars.MOCK_USDC_ADDRESS || ''}
REACT_APP_MOCK_ETH_ADDRESS=${envVars.MOCK_ETH_ADDRESS || ''}

# Network Configuration
REACT_APP_CHAIN_ID=${envVars.CHAIN_ID || '31337'}
REACT_APP_RPC_URL=${envVars.RPC_URL || 'http://localhost:8545'}
REACT_APP_NETWORK=${envVars.NETWORK || 'localhost'}

# Backend API URL
REACT_APP_API_URL=http://localhost:3000
`;

  // Write to frontend .env file
  fs.writeFileSync(frontendEnvPath, frontendEnvContent);
  
  console.log('‚úÖ Frontend .env file created successfully!');
  console.log('üìÅ Location:', frontendEnvPath);
  console.log('üîó Contract addresses copied:');
  console.log(`   LOP: ${envVars.LOP_ADDRESS || 'NOT FOUND'}`);
  console.log(`   OptionsNFT: ${envVars.OPTIONS_NFT_ADDRESS || 'NOT FOUND'}`);
  console.log(`   DummyToken: ${envVars.DUMMY_TOKEN_ADDRESS || 'NOT FOUND'}`);
  console.log(`   MockUSDC: ${envVars.MOCK_USDC_ADDRESS || 'NOT FOUND'}`);
  console.log(`   MockETH: ${envVars.MOCK_ETH_ADDRESS || 'NOT FOUND'}`);
  
} catch (error) {
  console.error('‚ùå Error setting up frontend environment:', error.message);
  process.exit(1);
} 